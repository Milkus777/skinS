import streamlit as st
import numpy as np
from PIL import Image
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout, Activation

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–æ–∂–Ω—ã—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π", page_icon="ü©∫", layout="centered")

# –°–ª–æ–≤–∞—Ä—å –∫–ª–∞—Å—Å–æ–≤ (–∏–∑ Colab-—Å–∫—Ä–∏–ø—Ç–∞)
class_names_ru = [
    '–ú–µ–ª–∞–Ω–æ—Ü–∏—Ç–∞—Ä–Ω—ã–µ –Ω–µ–≤—É—Å—ã',
    '–ú–µ–ª–∞–Ω–æ–º–∞',
    '–î–æ–±—Ä–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–µ—Ä–∞—Ç–æ–∑–æ–ø–æ–¥–æ–±–Ω—ã–µ –ø–æ—Ä–∞–∂–µ–Ω–∏—è',
    '–ë–∞–∑–∞–ª—å–Ω–æ–∫–ª–µ—Ç–æ—á–Ω–∞—è –∫–∞—Ä—Ü–∏–Ω–æ–º–∞',
    '–ê–∫—Ç–∏–Ω–∏—á–µ—Å–∫–∏–µ –∫–µ—Ä–∞—Ç–æ–∑—ã',
    '–°–æ—Å—É–¥–∏—Å—Ç—ã–µ –ø–æ—Ä–∞–∂–µ–Ω–∏—è',
    '–î–µ—Ä–º–∞—Ç–æ—Ñ–∏–±—Ä–æ–º–∞'
]

# –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –º–æ–¥–µ–ª–∏ (–∫–æ–ø–∏—è –∏–∑ Colab)
def build_model():
    model = Sequential()
    model.add(Conv2D(filters=16, kernel_size=2, input_shape=(75, 100, 3), padding='same'))
    model.add(Activation('relu'))
    model.add(MaxPooling2D(pool_size=2))
    model.add(Conv2D(filters=32, kernel_size=2, activation='relu', padding='same'))
    model.add(MaxPooling2D(pool_size=2))
    model.add(Conv2D(filters=64, kernel_size=2, activation='relu', padding='same'))
    model.add(MaxPooling2D(pool_size=2))
    model.add(Conv2D(filters=128, kernel_size=2, activation='relu', padding='same'))
    model.add(MaxPooling2D(pool_size=2))
    model.add(Dropout(0.3))
    model.add(Flatten())
    model.add(Dense(150))
    model.add(Activation('relu'))
    model.add(Dropout(0.4))
    model.add(Dense(7, activation='softmax'))

    model.compile(loss='categorical_crossentropy',
                  optimizer='rmsprop',
                  metrics=['accuracy'])
    return model

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ —Å –ø—Ä–æ–≥—Ä–µ–≤–æ–º
@st.cache_resource
def load_model():
    model = build_model()
    model.load_weights("model.keras")  # –∏–ª–∏ full_model.h5

    # –ü—Ä–æ–≥—Ä–µ–≤–∞–µ–º –º–æ–¥–µ–ª—å dummy-–±–∞—Ç—á–µ–º
    dummy_input = np.zeros((1, 75, 100, 3))
    model.predict(dummy_input)

    return model

model = load_model()

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å
st.markdown("<h1 style='text-align: center; color: #2E8B57;'>ü©∫ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–æ–∂–Ω—ã—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π</h1>", unsafe_allow_html=True)
st.markdown("<p style='text-align: center;'>–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –∫–æ–∂–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–∏–∞–≥–Ω–æ–∑ –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏.</p>", unsafe_allow_html=True)

uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...", type=["jpg", "jpeg", "png"])

if uploaded_file is not None:
    image = Image.open(uploaded_file).convert("RGB")
    image = image.resize((100, 75))  # –¢–æ—á–Ω—ã–π —Ä–∞–∑–º–µ—Ä: —à–∏—Ä–∏–Ω–∞=100, –≤—ã—Å–æ—Ç–∞=75
    img_array = np.array(image) / 255.0  # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è [0, 1]
    img_array = (img_array - 0.5) * 2  # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ –¥–∏–∞–ø–∞–∑–æ–Ω—É [-1, 1], –∫–∞–∫ –≤ –æ–±—É—á–µ–Ω–∏–∏
    img_array = np.expand_dims(img_array, axis=0).astype(model.input.dtype)

    with st.spinner('üß† –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...'):
        predictions = model.predict(img_array)[0]

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    st.image(image, caption="–í–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", use_column_width=True)

    st.subheader("üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:")
    max_prob = 0
    predicted_class = ""

    prediction_text = ""
    for i, class_name in enumerate(class_names_ru):
        prob_percent = round(predictions[i] * 100, 2)
        if prob_percent > max_prob:
            max_prob = prob_percent
            predicted_class = class_name
        prediction_text += f"- {class_name}: {prob_percent}%\n"

    st.markdown(f"**–° —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é {max_prob}% —ç—Ç–æ {predicted_class}**")
    st.text_area("–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:", value=prediction_text, height=200, disabled=True)

else:
    st.info("üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")

# –§—É—Ç–µ—Ä
st.markdown("<hr><p style='text-align:center;'>Made with ‚ù§Ô∏è using Streamlit & TensorFlow</p>", unsafe_allow_html=True)
