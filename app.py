import streamlit as st
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image
import numpy as np
import os

st.set_page_config(page_title="–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–æ–∂–Ω—ã—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π", layout="centered")
st.title("üî¨ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–æ–∂–Ω—ã—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π")
st.markdown("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–∂–∏, –∏ –º–æ–¥–µ–ª—å –ø—Ä–µ–¥—Å–∫–∞–∂–µ—Ç –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω–æ–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ.")

@st.cache_resource
def load_keras_model():
    return load_model('model.keras')

model = load_keras_model()

class_names = {
    'nv': '–ú–µ–ª–∞–Ω–æ—Ü–∏—Ç–∞—Ä–Ω—ã–µ –Ω–µ–≤—É—Å—ã',
    'mel': '–ú–µ–ª–∞–Ω–æ–º–∞',
    'bkl': '–î–æ–±—Ä–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–µ—Ä–∞—Ç–æ–∑–æ–ø–æ–¥–æ–±–Ω—ã–µ –ø–æ—Ä–∞–∂–µ–Ω–∏—è',
    'bcc': '–ë–∞–∑–∞–ª—å–Ω–æ–∫–ª–µ—Ç–æ—á–Ω–∞—è –∫–∞—Ä—Ü–∏–Ω–æ–º–∞',
    'akiec': '–ê–∫—Ç–∏–Ω–∏—á–µ—Å–∫–∏–µ –∫–µ—Ä–∞—Ç–æ–∑—ã',
    'vasc': '–°–æ—Å—É–¥–∏—Å—Ç—ã–µ –ø–æ—Ä–∞–∂–µ–Ω–∏—è',
    'df': '–î–µ—Ä–º–∞—Ç–æ—Ñ–∏–±—Ä–æ–º–∞'
}

uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...", type=["jpg", "jpeg", "png"])

if uploaded_file is not None:
    st.image(uploaded_file, caption='–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', use_column_width=False, width=250)

    with open(os.path.join("temp.jpg"), "wb") as f:
        f.write(uploaded_file.getbuffer())

    img = image.load_img(uploaded_file, target_size=(75, 100))
    img_array = image.img_to_array(img) / 255.0
    img_array = np.expand_dims(img_array, axis=0)

    predictions = model.predict(img_array)[0]
    predicted_label = list(class_names.keys())[np.argmax(predictions)]
    confidence = float(predictions[np.argmax(predictions)])

    st.success(f"‚úÖ –ü—Ä–æ–≥–Ω–æ–∑: **{class_names[predicted_label]}**")
    st.info(f"–ù–∞–¥—ë–∂–Ω–æ—Å—Ç—å: **{round(confidence * 100, 2)}%**")

    os.remove("temp.jpg")
